// <auto-generated />
using System;
using Kinetic.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kinetic.Infrastructure.Data.Migrations
{
    [DbContext(typeof(KineticDbContext))]
    [Migration("20240320151126_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("application")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Kinetic.Core.Entities.Space.BackLog.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InitiatorId")
                        .HasColumnType("int");

                    b.Property<int?>("SpaceBackLogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SpaceBackLogId");

                    b.ToTable("Logs", "application");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.BackLog.SpaceBackLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ParentSpaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SpaceBackLogs", "application");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.Restrictions.Restriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("RestrictedTicketActions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Restrictions", "application");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Restriction");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.ToTable("Roles", "application");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.Space", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("SpaceBackLogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SpaceBackLogId")
                        .IsUnique();

                    b.ToTable("Spaces", "application");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.SpaceUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SpaceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleId")
                        .IsUnique();

                    b.ToTable("SpaceUsers", "application");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.Tag", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.HasIndex("TicketId");

                    b.ToTable("Tags", "application");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedToId")
                        .HasColumnType("int");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("SpaceId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SpaceId");

                    b.HasIndex("TicketId");

                    b.ToTable("Tickets", "application");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", "application");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.Restrictions.PriorityRestriction", b =>
                {
                    b.HasBaseType("Kinetic.Core.Entities.Space.Restrictions.Restriction");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PriorityRestriction");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.Restrictions.TagRestriction", b =>
                {
                    b.HasBaseType("Kinetic.Core.Entities.Space.Restrictions.Restriction");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("TagName");

                    b.HasDiscriminator().HasValue("TagRestriction");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.BackLog.Log", b =>
                {
                    b.HasOne("Kinetic.Core.Entities.Space.BackLog.SpaceBackLog", null)
                        .WithMany("Logs")
                        .HasForeignKey("SpaceBackLogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.Restrictions.Restriction", b =>
                {
                    b.HasOne("Kinetic.Core.Entities.Space.Role", null)
                        .WithMany("Restrictions")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.Role", b =>
                {
                    b.HasOne("Kinetic.Core.Entities.Space.Space", null)
                        .WithMany("Roles")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.Space", b =>
                {
                    b.HasOne("Kinetic.Core.Entities.User", "Owner")
                        .WithMany("Spaces")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Kinetic.Core.Entities.Space.BackLog.SpaceBackLog", "SpaceBackLog")
                        .WithOne("ParentSpace")
                        .HasForeignKey("Kinetic.Core.Entities.Space.Space", "SpaceBackLogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("SpaceBackLog");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.SpaceUser", b =>
                {
                    b.HasOne("Kinetic.Core.Entities.Space.Space", "Space")
                        .WithMany("SpaceUsers")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kinetic.Core.Entities.User", "User")
                        .WithMany("SpaceUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Kinetic.Core.Entities.Space.Role", "UserRole")
                        .WithOne()
                        .HasForeignKey("Kinetic.Core.Entities.Space.SpaceUser", "UserRoleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Space");

                    b.Navigation("User");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.Tag", b =>
                {
                    b.HasOne("Kinetic.Core.Entities.Space.Ticket", null)
                        .WithMany("Tags")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.Ticket", b =>
                {
                    b.HasOne("Kinetic.Core.Entities.Space.SpaceUser", "AssignedTo")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Kinetic.Core.Entities.Space.SpaceUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Kinetic.Core.Entities.Space.Space", "RootSpace")
                        .WithMany("Tickets")
                        .HasForeignKey("SpaceId");

                    b.HasOne("Kinetic.Core.Entities.Space.Ticket", null)
                        .WithMany("SubTasks")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AssignedTo");

                    b.Navigation("Creator");

                    b.Navigation("RootSpace");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.Restrictions.TagRestriction", b =>
                {
                    b.HasOne("Kinetic.Core.Entities.Space.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.BackLog.SpaceBackLog", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("ParentSpace")
                        .IsRequired();
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.Role", b =>
                {
                    b.Navigation("Restrictions");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.Space", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("SpaceUsers");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.SpaceUser", b =>
                {
                    b.Navigation("AssignedTickets");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.Space.Ticket", b =>
                {
                    b.Navigation("SubTasks");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Kinetic.Core.Entities.User", b =>
                {
                    b.Navigation("SpaceUsers");

                    b.Navigation("Spaces");
                });
#pragma warning restore 612, 618
        }
    }
}
